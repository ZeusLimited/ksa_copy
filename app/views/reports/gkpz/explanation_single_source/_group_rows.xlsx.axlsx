@columns.each_pair do |ckey, cvalue|
  group["#{ckey}_total"] = 0 if cvalue[:sum]
end

@simple_sheet.add_row_title group['name'], style: @styles["group_row_h#{nesting_level}".to_sym] if group['name'].present?

if group.key?('children')
  group['children'].each do |child|
    render 'group_rows', group: child, nesting_level: nesting_level + 1
    @columns.each_pair do |ckey, cvalue|
      group["#{ckey}_total"] += child["#{ckey}_total"] || 0 if cvalue[:sum]
    end
  end
end

if group.key?('filter')
  displayed_rows = 0
  row_num = 0
  row_begin = @sheet.rows.size

  @report.result_rows(group['filter']).each_with_index do |row, index|
    values = @columns.map do |c|
      c[0] == :c1 ? index + 1 : c[1][:value].call(row)
    end

    excel_row = @sheet.add_row values, style: @column_styles, types: @column_types
    @columns.each_pair do |ckey, cvalue|
      group["#{ckey}_total"] += cvalue[:value].call(row) || 0 if cvalue[:sum]
    end
  end

  row_end = @sheet.rows.size

  @outlines << { start_index: row_begin, end_index: row_end - 1, level: 1 }
end

if group.key?('sum_name')
  values = @columns.map do |c|
    if c[0] == :c1
      group['sum_name']
    else
      if c[1][:sum]
        c[1][:sum_value] ? c[1][:sum_value].call(group) : group["#{c[0]}_total"]
      else
        nil
      end
    end
  end

  row = @sheet.add_row values, style: @sum_styles
  @sheet.merge_cells row.cells.first(4)
end
