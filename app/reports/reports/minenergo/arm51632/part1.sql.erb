select

t.id as tender_id,
l.id as lot_id,
s.id as spec_id,
gkpz_pl.id as gkpz_pl_id,
--1
'РАО Энергетические системы Востока' as root_name,
--2
fact_cust.name as root_customer_name,
--3
decode(s.direction_id,<%= yaml_directions['ks'] %>,'НС','ТПиР') as direction_name,
--4
ip.name as invest_project_name,
--5
ip.object_name as invest_object_name,
--6
ip.date_install,
--7
coalesce(ip.power_elec_gen, 0) as invest_power_mvt,
--8
coalesce(ip.power_substation, 0) as invest_power_mva,
--9
coalesce(ip.power_elec_net, 0) + coalesce(ip.power_thermal_net, 0) as invest_power_km,
--10
ptypes.name as product_type_name,
--10_1
gkpz_pl.num_tender || (case when l.plan_lot_id is not null then '' else '.' || t.num end) || '.' || (case when l.plan_lot_id is not null then gkpz_pl.num_lot else l.num end) as lot_num,
--11
l.name as lot_name,
--12
fin.name as financing_name,
--13
fact_org.name as org_name,
--14
(case when rk_l.id is not null
  then s.qty * s.cost
  else (case when t.tender_type_id in (<%= Constants::TenderTypes::FRAMES.join(', ') %>) then 0 else gkpz_ps.qty * gkpz_ps.cost end)
end) as gkpz_cost,
--15
ps.cost_doc,
--16
s.qty * s.cost as s_cost,
--17
coalesce(
  decode(vz_pl.state, 0, 'ВЗ', 1, null),
  (case when rk_l.id is not null then fact_ttype.name else gkpz_ttype.name end)
) as gkpz_ttype_name,
--18
fact_ttype.name || decode(wpl.solution_type_id, <%= Constants::WinnerProtocolSolutionTypes::SINGLE_SOURCE %>, ' ЕИ', '') as fact_ttype_name,
--19
decode(t.tender_type_id, <%= Constants::TenderTypes::UNREGULATED %>, 1, l.registred_bidders_count) as registred_bidders_count,
--20
count(*) over (partition by s.id) as cnt_offers,
--21
c.name || ' (' || coalesce(ow.shortname, '') || ')' as contr_name,
--22
s.qty * os.cost as bid_cost,
--23
decode(o.status_id, <%= Constants::OfferStatuses::REJECT %>, c.name || ' (' || coalesce(ow.shortname, '') || ')', '') as bid_reject_name,
--24
(case when l.rebid_protocol_id is not null then 1 else 0 end) as rebid_count,
--25
s.qty * os.final_cost as bid_final_cost,
--26
decode(o.status_id, <%= Constants::OfferStatuses::WIN %>, s.qty * os.final_cost, null) as winner_final_cost,
--27
decode(o.status_id, <%= Constants::OfferStatuses::WIN %>, c.name || ' (' || coalesce(ow.shortname, '') || ')', '') as bid_winner_name,
--28.1
s.qty * contract_spec.cost_nds as contract_spec_cost_nds,
--28.2
s.qty * contract_spec.cost as contract_spec_cost,
--29
contract_am.amount_finance_nds,
--30
t.etp_num,
--31
--b2b-center
--32
(case when rk_l.id is not null then t.announce_date else gkpz_pl.announce_date end) as gkpz_announce_date,
--33
t.announce_date as fact_announce_date,
--34
(case when t.tender_type_id != <%= Constants::TenderTypes::ONLY_SOURCE %> then op.open_date end) as op_open_date,
--35
(case when t.tender_type_id != <%= Constants::TenderTypes::ONLY_SOURCE %> then wp.confirm_date end) as wp_confirm_date,
--36
decode(wpl.solution_type_id, <%= Constants::WinnerProtocolSolutionTypes::SINGLE_SOURCE %>, '5.13.1.1', decode(t.tender_type_id, <%= Constants::TenderTypes::ONLY_SOURCE %>, vz_pl.regulation_item_num, null)) as regulation_item_num,
--37
decode(wpl.solution_type_id, <%= Constants::WinnerProtocolSolutionTypes::SINGLE_SOURCE %>, fact_c.name, decode(t.tender_type_id, <%= Constants::TenderTypes::ONLY_SOURCE %>, vz_pl.commission_name, null)) as responcible_dept,
--38
decode(wpl.solution_type_id, <%= Constants::WinnerProtocolSolutionTypes::SINGLE_SOURCE %>, wp.num, decode(t.tender_type_id, <%= Constants::TenderTypes::ONLY_SOURCE %>, vz_pl.protocol_num, null)) as order_num,
--39
decode(wpl.solution_type_id, <%= Constants::WinnerProtocolSolutionTypes::SINGLE_SOURCE %>, wp.confirm_date, decode(t.tender_type_id, <%= Constants::TenderTypes::ONLY_SOURCE %>, vz_pl.protocol_date, null)) as order_date,
--40
wp.confirm_date + interval '20' day as plan_contract_date,
--41
contracts.confirm_date as contract_confirm_date,
--42
(case when rk_l.id is not null then contracts.delivery_date_begin else ps.delivery_date_begin end) as gkpz_delivery_date_begin,
--43
contracts.delivery_date_begin as contract_delivery_date_begin,
--44
contracts.delivery_date_end as contract_delivery_date_end,
--45
l.non_public_reason,
o.non_contract_reason,
contracts.non_delivery_reason,
--46
(case when rk_l.id is not null then 'Рамочный конкурс №' || gkpz_pl.num_tender || '.' || gkpz_pl.num_lot || ' ' else '' end) || coalesce(l.note, '') as note

from tenders t

inner join lots l on l.tender_id = t.id
inner join specifications s on s.lot_id = l.id
inner join invest_projects ip on ip.id = s.invest_project_id
inner join dictionaries ptypes on ptypes.ref_id = s.product_type_id
inner join dictionaries fin on fin.ref_id = s.financing_id

left join lots rk_l on l.frame_id = rk_l.id
left join specifications rk_s on s.frame_id = rk_s.id

left join plan_lots pl on coalesce(l.plan_lot_id, rk_l.plan_lot_id) = pl.id
left join plan_specifications ps on coalesce(s.plan_specification_id, rk_s.plan_specification_id) = ps.id
left join plan_spec_amounts psa on psa.plan_specification_id = ps.id and pl.gkpz_year = psa.year

left join
  (select * from
    (select tpl.*, row_number() over (partition by tpl.guid order by tpl.status_id desc, tp.date_confirm desc) rn
      from plan_lots tpl
      inner join protocols tp on tp.id = tpl.protocol_id and tp.date_confirm <= :end_date
      where tpl.status_id in (<%= Constants::PlanLotStatus::AGREEMENT_LIST.join(', ') %>)) sub
     where rn = 1) gkpz_pl on (pl.guid = gkpz_pl.guid)
left join
  (select * from
    (select
      tpl.*, coalesce(ri.num, tpl.point_clause) as regulation_item_num,
      row_number() over (partition by tpl.guid order by tp.date_confirm desc) rn,
      tp.num as protocol_num, tp.date_confirm as protocol_date, tc.name as commission_name
      from plan_lots tpl
      inner join protocols tp on tp.id = tpl.protocol_id and tp.date_confirm <= :end_date
      inner join commissions tc on tp.commission_id = tc.id
      left join regulation_items ri on (ri.id = tpl.regulation_item_id)
      ) sub
     where rn = 1) vz_pl on (pl.guid = vz_pl.guid)

left join (
  select tpl.guid, max(tp.date_confirm) as can_date
  from plan_lots tpl
  inner join protocols tp on tp.id = tpl.protocol_id and tp.date_confirm <= :end_date
  inner join commissions tc on tp.commission_id = tc.id
  where tpl.status_id = <%= Constants::PlanLotStatus::CANCELED %>
  group by tpl.guid
) can on gkpz_pl.guid = can.guid

left join plan_specifications gkpz_ps on gkpz_pl.id = gkpz_ps.plan_lot_id and gkpz_ps.guid = ps.guid
left join plan_spec_amounts gkpz_psa on gkpz_psa.plan_specification_id = gkpz_ps.id and gkpz_pl.gkpz_year = gkpz_psa.year

inner join departments fact_org on fact_org.id = t.department_id
left join arm_departments fact_cust on fact_cust.department_id = l.root_customer_id

left join commissions fact_c on t.commission_id = fact_c.id

left join dictionaries gkpz_ttype on gkpz_pl.tender_type_id = gkpz_ttype.ref_id
inner join dictionaries fact_ttype on t.tender_type_id = fact_ttype.ref_id

left join open_protocols op on op.tender_id = t.id
left join winner_protocols wp on wp.id = l.winner_protocol_id
left join winner_protocol_lots wpl on wpl.winner_protocol_id = wp.id and wpl.lot_id = l.id

inner join offer_specifications os on os.specification_id = s.id
inner join offers o on o.id = os.offer_id and o.version = 0
inner join bidders b on b.id = o.bidder_id
inner join contractors c on c.id = b.contractor_id
left join ownerships ow on ow.id = c.ownership_id

left join contracts on o.id = contracts.offer_id and contracts.type_id = <%= Constants::ContractTypes::BASIC %> and contracts.confirm_date <= :end_date
left join contract_specifications contract_spec on
  (contract_spec.specification_id = s.id and contracts.id = contract_spec.contract_id)
left join contract_amounts contract_am on contract_am.year = l.gkpz_year and contract_am.contract_specification_id = contract_spec.id
<% if winners.present? %>
  inner join (
    select lot_id from
    (select id
        from bidders
        where contractor_id in (<%= winners %>)
    ) bidders_win inner join offers offers_win on offers_win.bidder_id = bidders_win.id and offers_win.status_id = <%= Constants::OfferStatuses::WIN %> and offers_win.version = 0
  ) ow on l.id = ow.lot_id
<% end %>

where
l.status_id in (<%= Constants::LotStatus::HELD.join(', ') %>) -- статус лота
and can.guid is null -- неотмененная
and t.tender_type_id not in (<%= (Constants::TenderTypes::FRAMES + [Constants::TenderTypes::PO]).join(', ') %>) -- не рамки
and wp.confirm_date between :begin_date and :end_date
and s.direction_id in (<%= Direction.invest.select(:id).to_sql %>)-- направление
<% if gkpz_years.present? %>
  and l.gkpz_year in (<%= gkpz_years.join(', ') %>)
<% end %>

<% if customer.present? %>
  and s.customer_id in
    (<%= Department.subtree_ids_for(customer).join(', ') %>) -- заказчик
<% end %>

<% if organizers.present? %>
  and t.department_id in
    (<%= Department.subtree_ids_for(organizers).join(', ') %>) -- организатор
<% end %>

<% if tender_types.present? %>
  and t.tender_type_id in (<%= tender_types.join(', ') %>)
<% end %>

<% if directions.present? %>
  and s.direction_id in (<%= directions.join(', ') %>)
<% end %>

<% if financing_sources.present? %>
  and s.financing_id in (<%= financing_sources.join(', ') %>)
<% end %>

<% if subject_type.present? %>
  and l.subject_type_id = <%= subject_type %>
<% end %>

<% if consumers.present? %>
  and ps.consumer_id in (<%= Department.subtree_ids_for(consumers).join(', ') %>)
<% end %>

order by
  gkpz_pl.num_tender,
  (case when gkpz_pl.id is not null then gkpz_pl.num_lot else l.num end),
  t.num, t.id, l.id, s.id, decode(o.status_id, <%= Constants::OfferStatuses::WIN %>, 0, 1)
