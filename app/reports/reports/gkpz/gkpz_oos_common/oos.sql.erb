select
  case when lot_num > 0 then to_char(9 + lot_num) else '' end || eis_num as rn,
  case
    when amounts_cnt > 1 then 1
    else 0
  end as is_long_term,
  case
    when amounts_cnt > 1 then amounts_text
    else null
  end as amount_long_term,
  case
    when amounts_cnt > 1 and sub.sme_type_id = <%= Constants::SmeTypes::SME %> then amounts_text
    when amounts_cnt > 1 and coalesce(sub.sme_type_id,'0') != <%= Constants::SmeTypes::SME %> then amounts_text_sme
    else null
  end as amount_long_term_sme,
  sub.*
from
(
  select
  eis_num,
  pl.id,
  pl.gkpz_first_cost,
  pl.gkpz_last_cost,
  pl.okved,
  pl.okdp,
  pl.lot_name,
  pl.requirements,
  pl.unit_code,
  pl.unit_name,
  1 as qty,
  fias_okato,
  fias_name,
  consumer_name,
  sum(cost) as cost,
  sum(cost_nds) as cost_nds,
  pl.announce_date,
  delivery_date_end,
  tender_type_name,
  tender_type_fullname,
  decode(pl.etp_address_id, <%= Constants::EtpAddress::NOT_ETP %>, 'Нет', 'Да') as is_elform,
  decode(pl.etp_address_id, <%= Constants::EtpAddress::NOT_ETP %>, 0, 1) as is_elform_roseltorg,
  pl.quarter,
  pl.order1352_id,
  pl.sme_type_id,
  coalesce(ord, ord2) as ord,
  pl.status_id,
  pl.root_customer_id,
  pl.subject_type_id,
  pl.tender_type_id,
  pl.etp_address_id,
  pl.department_id,
  pl.gkpz_first_cost,
  pl.gkpz_last_cost,
  pl.first_announce_date,
  pl.second_announce_date,
  pl.first_tender_type,
  pl.second_tender_type,
  pl.first_delivery_date,
  pl.second_delivery_date,
  pl.gkpz_first_state,
  oos_tender_type_code,
  coalesce(oos_tender_type_code, '0') as oos_tender_type_code_roseltorg,
  null department,

  decode(pl.sme_type_id, <%= Constants::SmeTypes::SME %>, 'Да', 'Нет') as sme,
  decode(pl.sme_type_id, <%= Constants::SmeTypes::SME %>, 1, 0) as sme_roseltorg,

  case
    when pl.order1352_id = <%= Constants::Order1352::SELECT %> then '0'
    else REPLACE(order1352_name, '1.', '')
  end as order1352,
  case
    when pl.order1352_id = <%= Constants::Order1352::SELECT %> or order1352_name is null then '0'
    else REPLACE(order1352_name, '1.', '')
  end as order1352_roseltorg,

  null as etp_id,

  null as exchange_code,
  null as exchange_rate,
  null as date_exchange_rate,
  'Нет' as innovation,
  case
    when pl.main_direction_id in (<%= [yaml_directions['inivp_invest'], yaml_directions['inivp']].join(', ') %>)
      then 1
    else 0
  end as innovation_roseltorg,
  case when coalesce(lot_num_plan_eis,'') = '' then (row_number() over (partition by pl.id order by lot_id nulls first) - 1) else 0 end as lot_num,
  lot_id,
  case
    when pl.status_id = <%= Constants::PlanLotStatus::CANCELED %>
      then 'A'
    when pl.lot_status_id > <%= Constants::LotStatus::NEW %>
      then 'P'
    else
      'N'
  end as status,
  case
    when pl.status_id = <%= Constants::PlanLotStatus::CANCELED %> and pl.lot_status_id in (<%= Constants::LotStatus::FATAL.join(', ') %>)
      then 3
    when pl.status_id = <%= Constants::PlanLotStatus::CANCELED %>
      then  1
    else
      0
  end as cancellation_reason
  from (
    select
      distinct
      pl.id,
      gkpz_first.sum_cost as gkpz_first_cost,
      gkpz_last.sum_cost as gkpz_last_cost,
      gkpz_first.announce_date as first_announce_date,
      gkpz_last.announce_date as second_announce_date,
      gkpz_first.tender_type_id as first_tender_type,
      gkpz_last.tender_type_id as second_tender_type,
      gkpz_first.delivery_date as first_delivery_date,
      gkpz_last.delivery_date as second_delivery_date,
      gkpz_first.state as gkpz_first_state,
      pl.tender_type_id,
      pl.etp_address_id,
      pl.announce_date,
      pl.root_customer_id,
      pl.sme_type_id,
      pl.lot_name,
      pl.status_id,
      pl.version,
      pl.order1352_id,
      pl.subject_type_id,
      pl.state,
      pl.department_id,
      pl.gkpz_year,
      ps.id as spec_id,
      ps.num_spec,
      ps.OKVED_ID,
      ps.qty * ps.cost_nds as cost_nds,
      to_char(pl.announce_date, 'Q') as quarter,
      first_value(okved.code) over (partition by pl.id order by ps.num_spec) as okved,
      ps.OKDP_ID,
      first_value(okdp.code)  over (partition by pl.id order by ps.num_spec) as okdp,
      first_value(ps.requirements) over (partition by pl.id order by ps.num_spec) as requirements,
      ps.UNIT_ID,
      first_value(u.code) over (partition by pl.id order by ps.num_spec) as unit_code,
      first_value(u.name) over (partition by pl.id order by ps.num_spec) as unit_name,
      ps.qty * ps.cost as cost,
      <% if oos_etp.to_i == EtpAddress::B2B_ENERGO  %>
        string_agg(fias.okato, ';') over (partition by pl.id order by ps.num_spec, fps.id)  as fias_okato,
        string_agg(fias.name, ';') over (partition by pl.id order by ps.num_spec, fps.id)  as fias_name,
      <% else %>
        first_value(fias.okato) over (partition by pl.id order by ps.num_spec, fps.id) as fias_okato,
        first_value(fias.name) over (partition by pl.id order by ps.num_spec, fps.id) fias_name,
      <% end %>
      first_value(consumer.name) over (partition by pl.id order by ps.num_spec) consumer_name,
      tt.name as tender_type_name,
      tt.fullname as tender_type_fullname,
      first_value(ps.delivery_date_end) over (partition by pl.id order by ps.num_spec) as delivery_date_end,
      case when coalesce(l.num_plan_eis,'') = '' then epl.num else l.num_plan_eis end as eis_num,
      first_value(p.date_confirm) over (partition by pl.guid order by p.date_confirm nulls last) as ord,
      first_value(pl.created_at) over (partition by pl.guid order by pl.created_at) as ord2,
      ps.customer_id,
      ps.direction_id,
      pl.main_direction_id,
      ftt.foreign_type_code as oos_tender_type_code,
      order1352.name as order1352_name,
      l.id as lot_id,
      l.num_plan_eis as lot_num_plan_eis,
      l.status_id as lot_status_id
      from plan_lots pl
        inner join plan_specifications ps on (pl.id = ps.plan_lot_id)
        inner join FIAS_PLAN_SPECIFICATIONS fps on (fps.plan_specification_id = ps.id)
        left join fias on (fps.fias_id = fias.id)
        left join departments consumer on consumer.id = ps.consumer_id
        inner join dictionaries tt on (tt.ref_id = pl.tender_type_id)
        inner join okdp on (okdp.id = ps.okdp_id)
        inner join okved on (okved.id = ps.okved_id)
        inner join units u on (u.id = ps.unit_id)

        left join
        (select * from
          (select tpl.*, tps.sum_cost, tps.delivery_date, row_number() over (partition by tpl.guid order by tp.date_confirm) rn
              from plan_lots tpl
              inner join protocols tp on tp.id = tpl.protocol_id and tp.date_confirm <= :date_gkpz_on_state
                inner join
                	(
                		select plan_lot_id, sum(cost * qty) as sum_cost, max(delivery_date_end) as delivery_date from plan_specifications ps group by plan_lot_id
                	) tps on tps.plan_lot_id = tpl.id
             where tpl.status_id in (<%= Constants::PlanLotStatus::AGREEMENT_LIST.join(', ') %>)
           ) sub
           where rn = 1
         ) gkpz_first on (pl.guid = gkpz_first.guid)

        left join
         (select * from
           (select tpl.*, tps.sum_cost, tps.delivery_date, row_number() over (partition by tpl.guid order by tp.date_confirm desc) rn
               from plan_lots tpl
               inner join protocols tp on tp.id = tpl.protocol_id and tp.date_confirm <= :date_gkpz_on_state
               inner join
                 (
                   select plan_lot_id, sum(cost * qty) as sum_cost, max(delivery_date_end) as delivery_date from plan_specifications ps group by plan_lot_id
                 ) tps on tps.plan_lot_id = tpl.id
            where tpl.status_id in (<%= Constants::PlanLotStatus::AGREEMENT_LIST.join(', ') %>)
          ) sub
          where rn = 1
        ) gkpz_last on (pl.guid = gkpz_last.guid)

        left join dictionaries order1352 on order1352.ref_id = pl.order1352_id
        left join foreign_tender_types ftt
          on (ftt.tender_type_id = pl.tender_type_id
              and cast(ftt.is_etp as integer) = decode(pl.etp_address_id, <%= Constants::EtpAddress::NOT_ETP %>, 0, 1)
              and ftt.foreign_type = 'OOS')
        left join protocols p on p.id = pl.protocol_id
        left join lots l on pl.guid = l.plan_lot_guid
        left join eis_plan_lots epl on epl.plan_lot_guid = pl.guid and epl.year = extract(YEAR FROM pl.announce_date)
    where
      EXTRACT (YEAR FROM pl.announce_date) = :gkpz_year and pl.non_eis != true
  ) pl

  <% unless gkpz_type == 'current' %>
  inner join
    (select * from
      (
        select tpl.*, row_number() over (partition by tpl.guid order by tp.date_confirm desc, tpl.version) as rn
          from plan_lots tpl
               inner join protocols tp on (tpl.protocol_id = tp.id)
        Where tp.date_confirm <= :date_gkpz_on_state
      ) sub
      Where rn = 1
    ) gkpz_pl
    on pl.id = gkpz_pl.id
  <% end %>
  Where 1 = 1

  <% case gkpz_type
     when 'gkpz' %>
    And pl.state = 1
  <% when 'unplanned' %>
    And pl.state = 0
  <% when 'current' %>
    And pl.version = 0
  <% end %>

  <% unless current_user_root_dept_id.nil? %>
    And pl.customer_id in
      (<%= Department.subtree_ids_for(current_user_root_dept_id).join(', ') %>) -- заказчик
  <% end %>

  <% if customers.present? %>
    And pl.customer_id in
      (<%= Department.subtree_ids_for(customers).join(', ') %>) -- заказчик
  <% end %>

  <% if directions.present? %>
    And pl.direction_id in (<%= directions.join(', ') %>)
  <% end %>

  Group By pl.id, pl.gkpz_first_cost, pl.gkpz_last_cost, pl.first_announce_date, pl.second_announce_date, pl.first_tender_type,
           pl.second_tender_type, pl.first_delivery_date, pl.second_delivery_date, pl.gkpz_first_state,
           pl.okved, pl.okdp, pl.lot_name, pl.requirements, pl.unit_code, pl.unit_name, pl.delivery_date_end,
           pl.etp_address_id, pl.sme_type_id, pl.root_customer_id, pl.quarter, pl.fias_okato, pl.fias_name, pl.consumer_name, pl.status_id, pl.ord2,
           pl.eis_num, pl.tender_type_name, pl.tender_type_fullname, pl.announce_date, pl.ord, pl.oos_tender_type_code, pl.order1352_id, pl.order1352_name,
           pl.tender_type_id, pl.subject_type_id, pl.department_id, pl.main_direction_id, pl.lot_id, pl.lot_num_plan_eis, pl.lot_status_id
) sub

left join lateral
    (select psa_year_sum.id, sum(amount_cnt) as amounts_cnt,
            string_agg(psa_year_sum.amount_year || ':' || psa_year_sum.amount_finance,';' order by psa_year_sum.amount_year) as amounts_text,
            string_agg(psa_year_sum.amount_year || ':0',';' order by psa_year_sum.amount_year) as amounts_text_sme
       from
         (select pl.id, psa.year as amount_year, count(distinct ps_a.id) as spec_count, count(distinct psa.year) as amount_cnt, sum(amount_finance) as amount_finance
           from plan_lots pl
                inner join plan_specifications ps_a on pl.id = ps_a.plan_lot_id
                inner join plan_spec_amounts psa  on psa.plan_specification_id = ps_a.id
           where EXTRACT (YEAR FROM pl.announce_date) = :gkpz_year and sub.id = pl.id
           group by pl.id,psa.year
         ) psa_year_sum
       group by psa_year_sum.id
    ) psa_sum_text on true

Where 1 = 1
<% if gkpz_year.to_i >= 2018  %>
  and sub.lot_num = 0
<% end %>
<% if organizers.present? %>
  And sub.department_id in
    (<%= Department.subtree_ids_for(organizers).join(', ') %>) -- организатор
<% end %>

<% if statuses.present? %>
  And sub.status_id in (<%= statuses.join(', ') %>)
<% end %>

<% if etp_addresses.present? %>
  And sub.etp_address_id in (<%= etp_addresses.join(', ') %>)
<% end %>

<% if tender_types.present? %>
  And sub.tender_type_id in (<%= tender_types.join(', ') %>)
<% end %>

<% if subject_types.present? %>
  And sub.subject_type_id in (<%= subject_types.join(', ') %>)
<% end %>

--Order by rn
